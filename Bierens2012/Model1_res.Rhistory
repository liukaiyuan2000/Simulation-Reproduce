}
}
}
end.time <- Sys.time()
stopCluster(cl)
difftime(end.time, start.time, units = 'secs')
RES.sum
difftime(end.time, start.time, units = 'mins')
install.packages("D:\\Desktop\\Efficient diagnosis for parametric regression models的程序\\Sinica2022_0.3.0.tar.gz", repos = NULL, type = 'source')
detach("package:Sinica2022", unload = TRUE)
install.packages("D:\\Desktop\\Efficient diagnosis for parametric regression models的程序\\Sinica2022_0.3.0.tar.gz", repos = NULL, type = 'source')
remove.packages("Sinica2022")
install.packages("D:\\Desktop\\Efficient diagnosis for parametric regression models的程序\\Sinica2022_0.3.0.tar.gz", repos = NULL, type = 'source')
rm(list = ls())
DGP <- function(Model, case, n = 200){
x <- rnorm(n)
switch(
Model,
{
u <- switch(
case,
rnorm(n),
rlogis(n),
rt(n, 5),
rnorm(n, 0, x)
)
y <- 1 + x + u
}
)
return(
list(X = x, Y = y)
)
}
para.solve <- function(x, y, Model){
switch(
Model,
{
x = cbind(1, x)
theta.hat <- solve(t(x) %*% x) %*% t(x) %*% y
}
)
return(theta.hat)
}
Tnsc <- function(x, y, y.tilde, c){
n = length(x)
diffx <- outer(x, x, '-') * c
diffy <- outer(y, y, '-') * c
diffytilde <- outer(y.tilde, y.tilde, '-') * c
diffyytilde <- outer(y, y.tilde, '-') * c
diffytildey <- outer(y.tilde, y, '-') * c
diffy.vec <- (y - y.tilde) * c
temp1 = (sin(diffy)/diffy + sin(diffytilde)/diffytilde - sin(diffyytilde)/diffyytilde -
sin(diffytildey)/diffytildey) * (sin(diffx)/diffx)
I1 = sum(temp1[upper.tri(temp1)])
I2 = n - sum(sin(diffy.vec)/diffy.vec)
return((I1 + I2) * (2 / n))
}
y.tilde.sample <- function(x, theta.hat, Model){
n = length(x)
sigma.hat = sd(x)
switch(
Model,
y.tilde <- theta.hat[1] + theta.hat[2] * x + rnorm(n, 0, sigma.hat)
)
return(y.tilde)
}
bootstrap.sample <- function(x, theta.hat, Model, B){
n = length(x)
sigma.hat = sd(x)
switch(
Model,
{
u.star = matrix(rnorm(n*B, 0, sigma.hat), n, B)
y.star = theta.hat[1] + theta.hat[2] * x + u.star
}
)
return(y.star = y.star)
}
Tn.b <- function(x, y.b, c, Model, B){
theta.hat.b <- apply(y.b, 2, \(y) para.solve(x, y, Model))
y.tilde.b <- apply(theta.hat.b, 2, \(theta) y.tilde.sample(x, theta, Model))
Tn.b = rep(0, B)
for(i in 1:B){
Tn.b[i] = Tnsc_rcpp(x, y.b[, i], y.tilde.b[, i], c)
}
return(Tn.b)
}
Bierens.test <- function(case, Model, alpha, c, B = 500, nsim = 1000){
res = rep(0, nsim)
for(i in 1:nsim){
cat(i, '\r')
data = DGP(Model, case)
x = data$X
y = data$Y
theta.hat = para.solve(x, y, Model)
y.tilde = y.tilde.sample(x, theta.hat, Model)
Tn.hat = Tnsc_rcpp(x, y, y.tilde, c)
y.b = bootstrap.sample(x, theta.hat, Model, B)
Tn.b.hat = Tn.b(x, y.b, c, Model, B)
res[i] = 1*(Tn.hat > sort(Tn.b.hat)[(1 - alpha)*B])
}
return(mean(res))
}
Model = 1
alpha = 0.05
c = 5
nsim = 1000
B = 500
case = 1
data = DGP(Model, case)
x = data$X
y = data$Y
theta.hat = para.solve(x, y, Model)
y.tilde = y.tilde.sample(x, theta.hat, Model)
Rcpp::sourceCpp("D:/Desktop/Bierens2012/AA.cpp")
install.packages('RcppArmadillo')
install.packages("RcppArmadillo")
Rcpp::sourceCpp("D:/Desktop/Bierens2012/AA.cpp")
Rcpp::sourceCpp("D:/Desktop/Bierens2012/AAA.cpp")
AAA
AAA()
Rcpp::sourceCpp("D:/Desktop/Bierens2012/AAA.cpp")
Rcpp::sourceCpp("D:/Desktop/Bierens2012/AAA.cpp")
Rcpp::sourceCpp("D:/Desktop/Bierens2012/AA.cpp")
n = length(x)
diffx <- outer(x, x, '-') * c
diffy <- outer(y, y, '-') * c
diffytilde <- outer(y.tilde, y.tilde, '-') * c
diffyytilde <- outer(y, y.tilde, '-') * c
diffytildey <- outer(y.tilde, y, '-') * c
diffy.vec <- (y - y.tilde) * c
temp1 = (sin(diffy)/diffy + sin(diffytilde)/diffytilde - sin(diffyytilde)/diffyytilde -
sin(diffytildey)/diffytildey) * (sin(diffx)/diffx)
AA(x, y, y.tilde, c)-temp1
Rcpp::sourceCpp("D:/Desktop/Bierens2012/AA.cpp")
AA(x, y, y.tilde, c)-temp1
AA(x, y, y.tilde, c)
Rcpp::sourceCpp("D:/Desktop/Bierens2012/AA.cpp")
AA(x, y, y.tilde, c)
Rcpp::sourceCpp("D:/Desktop/Bierens2012/AAA.cpp")
Rcpp::sourceCpp("D:/Desktop/Bierens2012/AAA.cpp")
Rcpp::sourceCpp("D:/Desktop/Bierens2012/AAA.cpp")
Rcpp::sourceCpp("D:/Desktop/Bierens2012/AA.cpp")
AA(x, y, y.tilde, c)
AA(x, y, y.tilde, c)-temp1
Rcpp::sourceCpp("D:/Desktop/Bierens2012/AA.cpp")
Rcpp::sourceCpp("D:/Desktop/Bierens2012/AA.cpp")
I1 = sum(temp1[upper.tri(temp1)])
AA(x, y, y.tilde, c)-I1
AA(x, y, y.tilde, c)
Rcpp::sourceCpp("D:/Desktop/Bierens2012/AA.cpp")
AA(x, y, y.tilde, c)
sum(AA(x, y, y.tilde, c))
AA(x, y, y.tilde, c)[,1]
sin(0)
Rcpp::sourceCpp("D:/Desktop/Bierens2012/AA.cpp")
options(warn = -1)
AA(x, y, y.tilde, c)
I1
Rcpp::sourceCpp("D:/Desktop/Bierens2012/AA.cpp")
AA(x, y, y.tilde, c)
Tnsc(x,y,y.tilde,c)
system.time(
for(i in 1:100){
ss = AA(x, y, y.tilde, c)
}
)
system.time(
for(i in 1:500){
ss = AA(x, y, y.tilde, c)
}
)
system.time(
for(i in 1:500){
ss = Tnsc(x,y,y.tilde,c)
}
)
Rcpp::sourceCpp("D:/Desktop/Bierens2012/Rcpp_funcs.cpp")
Tnsc_rcpp(x, y, y.tilde, c)
Tnsc(x,y,y.tilde,c)
AA(x, y, y.tilde, c)
system.time(
for(i in 1:500){
ss = Tnsc_rcpp(x, y, y.tilde, c)
}
)
system.time(
for(i in 1:500){
ss = AA(x, y, y.tilde, c)
}
)
source("D:/Desktop/Bierens2012/R_funcs.R")
Rcpp::sourceCpp("D:/Desktop/Bierens2012/Rcpp_funcs.cpp")
system.time(Bierens.test(case = 1, Model = 1, alpha, c = 5, B = 500, nsim = 1))
system.time(Bierens.test(case = 1, Model = 1, alpha = 0.05, c = 5, B = 500, nsim = 1))
nsim = 1000
B = 500
alpha.choose = c(0.01, 0.05, 0.1)
c.choose = seq(5, 25, by = 5)
case.choose = 1:4
Model = 1
case = 1
alpha = 0.05
c = 5
tmp <- tempfile(fileext = ".out")
Rprof(tmp)
res = rep(0, nsim)
for(i in 1:nsim){
cat(i, '\r')
data = DGP(Model, case)
x = data$X
y = data$Y
theta.hat = para.solve(x, y, Model)
y.tilde = y.tilde.sample(x, theta.hat, Model)
Tn.hat = Tnsc_rcpp(x, y, y.tilde, c)
y.b = bootstrap.sample(x, theta.hat, Model, B)
Tn.b.hat = Tn.b(x, y.b, c, Model, B)
res[i] = 1*(Tn.hat > sort(Tn.b.hat)[(1 - alpha)*B])
}
tmp <- tempfile(fileext = ".out")
Rprof(tmp)
res = Bierens.test(case = 1, Model = 1, alpha = 0.05, c = 5, B = 100, nsim = 500)
Rprof(NULL)
summaryRprof(tmp)
res
Rcpp::sourceCpp("D:/Desktop/Bierens2012/Rcpp_funcs.cpp")
options(warn=-1)
install.packages("D:/Desktop/Bierens2012/Bierens2012_0.1.0.tar.gz", repos = NULL, type = 'source')
Bierens.test
Bierens.test <- function(case, Model, alpha, c, B = 500, nsim = 1000){
res = rep(0, nsim)
for(i in 1:nsim){
cat(i, '\r')
data = DGP(Model, case)
x = data$X
y = data$Y
theta.hat = para.solve(x, y, Model)
y.tilde = y.tilde.sample(x, theta.hat, Model)
phi.y = atan(scale(y))
phi.y.tilde = atan(scale(y.tilde))
Tn.hat = Tnsc_rcpp(x, phi.y, phi.y.tilde, c)
y.b = bootstrap.sample(x, theta.hat, Model, B)
phi.y.b = apply(y.b, 2, \(x) atan(scale(x)))
Tn.b.hat = Tn.b(x, phi.y.b, c, Model, B)
res[i] = 1*(Tn.hat > sort(Tn.b.hat)[(1 - alpha)*B])
}
return(mean(res))
}
tmp <- tempfile(fileext = ".out")
Rprof(tmp)
res = Bierens.test(case = 1, Model = 1, alpha = 0.05, c = 5, B = 100, nsim = 300)
Bierens.test(case = 1, Model = 1, alpha = 0.05, c = 5, B = 100, nsim = 300)
case = 1; Model = 1; alpha = 0.05; c = 5;B = 100;nsim = 300
data = DGP(Model, case)
x = data$X
y = data$Y
theta.hat = para.solve(x, y, Model)
y.tilde = y.tilde.sample(x, theta.hat, Model)
phi.y = atan(scale(y))
phi.y.tilde = atan(scale(y.tilde))
phi.y
drop(phi.y)
as.vector(phi.y)
phi.y = as.vector(atan(scale(y)))
phi.y.tilde = as.vector(atan(scale(y.tilde)))
Tn.hat = Tnsc_rcpp(x, phi.y, phi.y.tilde, c)
phi.y
phi.y.tilde
c
x
Tnsc_rcpp(x, phi.y, phi.y.tilde, c)
Tnsc_rcpp(x, y, y.tilde, c)
x
y
y.tilde
c
library(Bierens2012)
Tnsc_rcpp(x, y, y.tilde, c)
Rcpp::sourceCpp("D:/Desktop/Bierens2012/Rcpp_funcs.cpp")
Tnsc_rcpp(x, y, y.tilde, c)
library(Bierens2012)
data = DGP(Model, case)
x = data$X
y = data$Y
theta.hat = para.solve(x, y, Model)
y.tilde = y.tilde.sample(x, theta.hat, Model)
phi.y = as.vector(atan(scale(y)))
phi.y.tilde = as.vector(atan(scale(y.tilde)))
Tn.hat = Tnsc_rcpp(x, phi.y, phi.y.tilde, c)
Tnsc_rcpp
library(CSTM2017)
Snm_rcpp
Tnsc_rcpp
detach("package:Bierens2012", unload = TRUE)
remove.packages("Bierens2012")
install.packages("D:/Desktop/Bierens2012/Bierens2012_0.1.0.tar.gz", repos=NULL,type='source')
library(Bierens2012)
Tnsc_rcpp
install.packages("D:/Desktop/Bierens2012/Bierens2012_0.1.0.tar.gz", repos=NULL,type='source')
library(Bierens2012)
Tnsc_rcpp
install.packages("D:/Desktop/test/Test_0.1.0.tar.gz",repos=NULL,type='source')
library(Test)
get_sum
install.packages("D:/Desktop/test/Test_0.1.0.tar.gz",repos=NULL,type='source')
install.packages("D:/Desktop/test/Test_0.1.0.tar.gz",repos=NULL,type='source')
install.packages("D:/Desktop/test/Test_0.1.0.tar.gz",repos=NULL,type='source')
remove.packages("Test")
install.packages("D:/Desktop/test/Test_0.1.0.tar.gz",repos=NULL,type='source')
install.packages("D:/Desktop/Bierens2012/Bierens2012_0.1.0.tar.gz",repos=NULL,type='source')
library(Bierens2012)
Tnsc_rcpp
install.packages("D:/Desktop/Bierens2012/Bierens2012_0.1.0.tar.gz",repos=NULL,type='source')
library(Bierens2012)
Tnsc_rcpp
install.packages("D:\\Desktop\\Bierens2012\\Bierens2012_0.2.0.tar.gz",repos = NULL,type='source')
source("D:/Desktop/Bierens2012/Rparallel_funcs.R")
Model = 1
c.vec = seq(5, 25, by = 5)
case.choose = 1:4
alpha.choose = c(0.01, 0.05, 0.1)
# tmp <- tempfile(fileext = ".out")
# Rprof(tmp)
cl <- makeSOCKcluster(no_cores)
registerDoSNOW(cl)
start.time <- Sys.time()
RES.sum <- c()
for(case in case.choose){
for(alpha in alpha.choose){
cat(
'Model = ', switch(Model, 'Linear', 'Possion'),
'; Case = ', case, '; Alpha = ', alpha,
'\n', sep = ""
)
res <- Bierens.test.parallel(case, Model, alpha, c.vec, B = 300, nsim, Phi.func = Phi)
RES.sum <- cbind(RES.sum, res)
}
}
stopCluster(cl)
source("D:/Desktop/Bierens2012/Rparallel_funcs.R")
Model = 1
c.vec = seq(5, 25, by = 5)
case.choose = 1:4
alpha.choose = c(0.01, 0.05, 0.1)
# tmp <- tempfile(fileext = ".out")
# Rprof(tmp)
cl <- makeSOCKcluster(no_cores)
registerDoSNOW(cl)
start.time <- Sys.time()
RES.sum <- c()
for(case in case.choose){
for(alpha in alpha.choose){
cat(
'Model = ', switch(Model, 'Linear', 'Possion'),
'; Case = ', case, '; Alpha = ', alpha,
'\n', sep = ""
)
res <- Bierens.test.parallel(case, Model, alpha, c.vec, B = 300, nsim, Phi.func = Phi)
RES.sum <- cbind(RES.sum, res)
}
}
RES.sum
case
data = DGP(Model, case)
n=200
x <- rnorm(n)
x
u <- switch(
case,
rnorm(n),
rlogis(n),
rt(n, 5),
rnorm(n, 0, x)
)
rnorm(n, 0, x)
rnorm(2,0,c(-1,1))
rnorm(n, 0, abs(x))
RES.sum
library(stargazer)
stargazer(RES.sum, summary = F, table.placement = "H")
RES.sum
install.packages("D:\\Desktop\\Bierens2012\\Bierens2012_0.2.0.tar.gz",repos=NULL,type='source')
source("D:/Desktop/Bierens2012/Rparallel_funcs.R")
Model = 1
c.vec = seq(5, 25, by = 5)
case.choose = 4
alpha.choose = c(0.01, 0.05, 0.1)
# tmp <- tempfile(fileext = ".out")
# Rprof(tmp)
cl <- makeSOCKcluster(no_cores)
registerDoSNOW(cl)
start.time <- Sys.time()
RES.sum <- c()
for(case in case.choose){
for(alpha in alpha.choose){
cat(
'\nModel = ', switch(Model, 'Linear', 'Possion'),
'; Case = ', case, '; Alpha = ', alpha,
'\n', sep = ""
)
res <- Bierens.test.parallel(case, Model, alpha, c.vec, B = 300, nsim, Phi.func = Phi)
RES.sum <- cbind(RES.sum, res)
}
}
end.time <- Sys.time()
stopCluster(cl)
difftime(end.time, start.time, units = 'mins')
# Rprof(NULL)
# summaryRprof(tmp)
RES.sum
library(stargazer)
stargazer(RES.sum, summary = F, table.placement = "H")
source("D:/Desktop/Bierens2012/Rparallel_funcs.R")
Model = 1:4
c.vec = seq(5, 25, by = 5)
case.choose = 4
alpha.choose = c(0.01, 0.05, 0.1)
# tmp <- tempfile(fileext = ".out")
# Rprof(tmp)
cl <- makeSOCKcluster(no_cores)
registerDoSNOW(cl)
start.time <- Sys.time()
RES.sum <- c()
for(case in case.choose){
for(alpha in alpha.choose){
cat(
'\nModel = ', switch(Model, 'Linear', 'Possion'),
'; Case = ', case, '; Alpha = ', alpha,
'\n', sep = ""
)
res <- Bierens.test.parallel(case, Model, alpha, c.vec, B = 500, nsim, Phi.func = NULL)
RES.sum <- cbind(RES.sum, res)
}
}
source("D:/Desktop/Bierens2012/Rparallel_funcs.R")
Model = 1
c.vec = seq(5, 25, by = 5)
case.choose = 1:4
alpha.choose = c(0.01, 0.05, 0.1)
# tmp <- tempfile(fileext = ".out")
# Rprof(tmp)
cl <- makeSOCKcluster(no_cores)
registerDoSNOW(cl)
start.time <- Sys.time()
RES.sum <- c()
for(case in case.choose){
for(alpha in alpha.choose){
cat(
'\nModel = ', switch(Model, 'Linear', 'Possion'),
'; Case = ', case, '; Alpha = ', alpha,
'\n', sep = ""
)
res <- Bierens.test.parallel(case, Model, alpha, c.vec, B = 500, nsim, Phi.func = NULL)
RES.sum <- cbind(RES.sum, res)
}
}
end.time <- Sys.time()
stopCluster(cl)
difftime(end.time, start.time, units = 'mins')
# Rprof(NULL)
# summaryRprof(tmp)
RES.sum
library(stargazer)
stargazer(RES.sum, summary = F, table.placement = "ht")
difftime(end.time, start.time, units = 'hours')
hist(rlogis(1000))
plot(density(rlogis(1000)))
par(new = T)
plot(density(rnorm(1000)))
plot(density(rlogis(10000)))
par(new = T)
plot(density(rnorm(10000)))
plot(density(rlogis(10000)))
lines(density(rnorm(10000)))
plot(density(rnorm(10000)))
lines(density(rlogis(10000)))
lines(density(rt(1e4, 5)), col = 2)
plot(density(rnorm(10000)))
lines(density(rlogis(10000)))
lines(density(rt(1e4, 5)), col = 2)
plot(density(rnorm(10000)))
lines(density(rlogis(10000, scale = 2)))
plot(density(rnorm(10000)))
lines(density(rlogis(10000, scale = 1)))
plot(density(rnorm(10000)))
lines(density(rlogis(10000, scale = 0.1)))
plot(density(rnorm(10000)))
lines(density(rlogis(10000, scale = 0.5)))
plot(density(rnorm(10000)))
lines(density(rlogis(10000, scale = 0.7)))
plot(density(rnorm(10000)))
lines(density(rlogis(10000, scale = 0.8)))
plot(density(rnorm(10000)))
lines(density(rlogis(10000, scale = 0.9)))
plot(density(rnorm(10000)))
lines(density(rlogis(10000, scale = 0.85)))
plot(density(rnorm(10000)))
lines(density(rlogis(10000, scale = 0.8)))
plot(density(rnorm(10000)))
lines(density(rlogis(10000, scale = 0.7)))
plot(density(rnorm(10000)))
lines(density(rlogis(10000, scale = 0.65)))
plot(density(rnorm(10000)))
lines(density(rlogis(10000, scale = 0.65)))
lines(density(rt(1e4, 5)), col = 2)
plot(density(rnorm(10000)), lwd = 2)
lines(density(rlogis(10000, scale = 0.65)))
lines(density(rt(1e4, 5)), col = 2)
# Rprof(NULL)
# summaryRprof(tmp)
RES.sum
savehistory("D:/Desktop/Bierens2012/Model1_res.Rhistory")
