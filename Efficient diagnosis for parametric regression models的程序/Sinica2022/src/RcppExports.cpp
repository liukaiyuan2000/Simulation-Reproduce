// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Tks_rand_rcpp
Eigen::VectorXd Tks_rand_rcpp(Eigen::MatrixXd V, Eigen::MatrixXd theta, Eigen::MatrixXd e);
RcppExport SEXP _Sinica2022_Tks_rand_rcpp(SEXP VSEXP, SEXP thetaSEXP, SEXP eSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type V(VSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type e(eSEXP);
    rcpp_result_gen = Rcpp::wrap(Tks_rand_rcpp(V, theta, e));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Sinica2022_Tks_rand_rcpp", (DL_FUNC) &_Sinica2022_Tks_rand_rcpp, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_Sinica2022(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
